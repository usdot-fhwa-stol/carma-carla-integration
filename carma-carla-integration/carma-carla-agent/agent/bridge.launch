<!--
 Copyright (C) 2021 LEIDOS.

 Licensed under the Apache License, Version 2.0 (the "License"); you may not
	@@ -13,6 +12,18 @@
 WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 License for the specific language governing permissions and limitations under
 the License.


 This file is loosely based on the reference architecture developed by Intel Corporation for Leidos located here
 https://github.com/carla-simulator/carla-autoware/blob/master/carla-autoware-agent/agent/bridge.launch

 That file has the following license and some code snippets from it may be present in this file as well and are under the same license.

 Copyright (c) 2019 Intel Corporation

 This work is licensed under the terms of the MIT license.
 For a copy, see <https://opensource.org/licenses/MIT>.
-->

<launch>
  <!-- common params -->
  <arg name='role_name' default='ego_vehicle'/>
  <arg name='wheelbase' default='2.7'/>

  <!-- driver status params -->
  <arg name='lidar_enabled' default='true'/>
  <arg name='controller_enabled' default='true'/>
  <arg name='camera_enabled' default='true'/>
  <arg name='gnss_enabled' default='true'/>
  <arg name='driver_status_pub_rate' default='10'/>

  <!-- robot status params -->
  <arg name='robot_status_pub_rate' default='10'/>

  <!-- route and plugins params -->
  <arg name='selected_route'/>
  <arg name='selected_plugins'/>
  <arg name='start_delay_in_seconds'/>

  <!-- ackermann control params -->
  <arg name='init_speed' default='5'/>
  <arg name='init_acceleration' default='1'/>
  <arg name='init_steering_angle' default='0'/>
  <arg name='init_jerk' default='0'/>
  <arg name='max_steering_degree' default='70'/>

  <!-- enable sensor external object-->
  <arg name='enable_sensor_objects' default='false'/>
  <arg name='sensor_object_pub_rate' default='10'/>
  <arg name='host' default='127.0.0.1'/>
  <arg name='port' default='2000'/>
  <arg name='sensor_id' default='1'/>
  <arg name='detection_cycle_delay_seconds' default='0.5'/>
  <!--
    ##################
    ## TF remapping ##
    ##################
  -->
  <!-- world to map tf -->
  <node pkg='tf'  type='static_transform_publisher' name='world_to_map' args='0 0 0 0 0 0 /world /map 10' />

  <!-- map to mobility tf -->
  <node pkg='tf'  type='static_transform_publisher' name='map_to_mobility' args='0 0 0 0 0 0 /map /mobility 10' />

  <!-- ego_vehicle to base_link tf -->
  <!-- Disabled as it gets published by ndt_matching -->
  <node pkg='tf'  type='static_transform_publisher' name='$(arg role_name)_to_baselink' args='0 0 0 0 0 0 /$(arg role_name) /base_link 10' />

  <!-- ego_vehicle/gnss to gps tf -->
  <node pkg='tf'  type='static_transform_publisher' name='$(arg role_name)gnss_to_gps' args='0 0 0 0 0 0 /$(arg role_name)/gnss/gnss1 /gps 10' />

  <!-- ego_vehicle/lidar to velodyne tf -->
  <node pkg='tf'  type='static_transform_publisher' name='$(arg role_name)lidar_to_velodyne' args='0 0 0 0 0 0 /$(arg role_name)/lidar/lidar /velodyne 10' />

  <!-- ego_vehicle/cameraFront to camera tf -->
  <node pkg='tf'  type='static_transform_publisher' name='$(arg role_name)camerafront_to_camera' args='0 0 0 0 0 0 /$(arg role_name)/camera/rgb/front /camera 10' />

  <!--
    #############################################
    ## topic remapping + data type conversions ##
    #############################################
  -->

  <!--
    # localization #
    Extract the pose, twist from carla odometry.
  -->
  <node pkg='carma_carla_bridge' type='carla_to_carma_localization' name='carla_to_carma_localization' output='screen'>
    <param name='role_name' type="str" value="$(arg role_name)"/>
  </node>
  <!--
    # external objects
    Extract the external objects from carla ObjectArray
  -->
  <group if="$(arg enable_sensor_objects)">
    <node pkg='carma_carla_bridge' type='carla_to_carma_external_objects' name='carla_to_carma_external_objects' output='screen'>
      <param name='role_name' type="str" value="$(arg role_name)"/>
    </node>
  </group>

  <group unless="$(arg enable_sensor_objects)">
    <node pkg='carma_carla_bridge' type='carla_to_carma_sensor_external_objects' name='carla_to_carma_sensor_external_objects' output='screen'>
      <param name='role_name' type="str" value="$(arg role_name)"/>
      <param name='sensor_object_pub_rate' type="double" value="$(arg robot_status_pub_rate)"/>
      <param name='host' type="str" value="$(arg host)"/>
      <param name='port' type="int" value="$(arg port)"/>
      <param name='sensor_id' type="str" value="$(arg sensor_id)"/>
      <param name='detection_cycle_delay_seconds' type="double" value="$(arg detection_cycle_delay_seconds)"/>
    </node>
  </group>

  <!-- convert vehicle command to carla ackermann drive-->
  <node pkg='carma_carla_bridge' type='carma_to_carla_ackermann_cmd' name='carma_to_carla_ackermann_cmd' output='screen'>
    <param name='role_name' type="str" value="$(arg role_name)"/>
    <param name="init_speed" type="double" value="$(arg init_speed)"/>
    <param name="init_acceleration" type="double" value="$(arg init_acceleration)"/>
    <param name="init_steering_angle" type="double" value="$(arg init_steering_angle)"/>
    <param name="init_jerk" type="double" value="$(arg init_jerk)"/>
  </node>

  <!-- convert the vehicle status from carla to carma -->
  <node pkg='carma_carla_bridge' type='carla_to_carma_vehicle_status' name='carla_to_carma_vehicle_status' output='screen'>
    <param name='role_name' type="str" value="$(arg role_name)"/>
    <param name='max_steering_degree' type="double" value="$(arg max_steering_degree)"/>
  </node>

  <node pkg='carma_carla_bridge' type='carma_carla_robot_status' name='carla_to_carma_robot_status' output='screen'>
    <param name='robot_status_pub_rate' type="double" value="$(arg robot_status_pub_rate)"/>
  </node>

  <node pkg='carma_carla_bridge' type='carma_carla_driver_status' name='carla_to_carma_driver_status' output='screen'>
    <param name='driver_status_pub_rate' type="double" value="$(arg driver_status_pub_rate)"/>
    <param name='lidar_enabled' type="bool" value="$(arg lidar_enabled)"/>
    <param name='controller_enabled' type="bool" value="$(arg controller_enabled)"/>
    <param name='camera_enabled' type="bool" value="$(arg camera_enabled)"/>
    <param name='gnss_enabled' type="bool" value="$(arg gnss_enabled)"/>
  </node>

  <!--
    # route #
    Set the vehicle route after localization.
  -->
  <node pkg='carma_carla_bridge' type='carma_carla_route' name='carma_carla_route' output='screen'>
    <param name='selected_route' type='str' value="$(arg selected_route)"/>
  </node>

  <!--
    # plugins #
    Activate all registered plugins.
  -->
  <node pkg='carma_carla_bridge' type='carma_carla_plugins' name='carma_carla_plugins' output='screen'>
    <param name='selected_plugins' type='str' value="$(arg selected_plugins)"/>
  </node>


  <!--
    # guidance #
    Set guidance to active once the plugins have been activated and the route has been selected.
  -->
  <node pkg='carma_carla_bridge' type='carma_carla_guidance' name='carma_carla_guidance' output='screen'>
    <param name='selected_route' type='str' value="$(arg selected_route)"/>
    <param name='selected_plugins' type='str' value="$(arg selected_plugins)"/>
    <param name='start_delay_in_seconds' type='double' value="$(arg start_delay_in_seconds)"/>
  </node>

</launch>
