#!/usr/bin/env python
# Copyright (C) 2021 LEIDOS.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.

"""
Subscribe from CARMA :geometry_msgs::PoseStamped
    Topic: /localization/current_pose

Call Services from CARMA:
    Service: /guidance/get_available_routes
             /guidance/set_active_route
"""

import rospy
from geometry_msgs.msg import PoseStamped, Pose
from cav_msgs.msg import RouteState, RouteEvent, Route
from cav_srvs.srv import GetAvailableRoutes, SetActiveRoute
from std_msgs.msg import String
received_pose = False
is_guidance_bridge_node_active = False

def get_available_route_ids():
    """
    Getting available route function
    if successfully got available route, return available route ID python list
    else, return None
    """
    service = rospy.ServiceProxy('/guidance/get_available_routes', GetAvailableRoutes)
    available_route_ids = []
    try:
        resp = service()
        for i in range(len(resp.available_routes)):
            route_msg = resp.available_routes[i]
            available_route_ids.append(resp.available_routes[i].route_id)
        return available_route_ids
    except:
        rospy.logerr("Invalid: /guidance/get_available_routes failed.")

def set_route(selected_route_id):
    """
    Setting selected route to CARMA platform
    """
    service = rospy.ServiceProxy('/guidance/set_active_route', SetActiveRoute)
    try:
        resp = service(choice=0, route_id=selected_route_id)
        if resp.error_status != 0:
            rospy.logerr('Error status response from /guidance/set_active_route:', resp)
        else:
            rospy.loginfo('Call set active route success!')
    except:
        rospy.logerr("Exception occurs during the set_active_route call")

def pose_cb(pose_msg):
    """
    callback current_pose to make sure carla_to_carma_localization start to send vehicle position info to CARMA
    PoseStamped message type:
        geometry_msgs::PoseStamped
    """
    global received_pose
    received_pose = True

def check_selected_route(available_route_ids, selected_route_id):
    """
    Checking the selected route if it can be matched with available route
    """
    ind_list = [ind for (ind, route_id) in enumerate(available_route_ids) if route_id == selected_route_id]
    if len(ind_list) == 1:
        return selected_route_id
    elif len(ind_list) > 1:
        rospy.logerr("Duplicate route files found")
    else:
        rospy.logerr("Route not found, check selected_route parameter and CARMA route folder")
    return None

def guidance_bridge_node_status_callback(data):
    global is_guidance_bridge_node_active
    if data.data == "The node is active":
        is_guidance_bridge_node_active = True

    rospy.loginfo(rospy.get_caller_id() + "carma_carla_route received notice in guidance_bridge_node_status_callback: %s", data.data)

def initialize():
    """
    main loop
    """
    rospy.init_node("carma_carla_route")
    selected_route_id = rospy.get_param('~selected_route')
    if selected_route_id == '':
        rospy.logerr("No input route found, please check the config file at /opt/carma/simulation/vehicle_config.json")
        return

    # sleep the node for n second to make sure current_pose has been set to CARMA platform properly
    rospy.sleep(2)
    available_route_ids = get_available_route_ids()
    rospy.Subscriber('/localization/current_pose', PoseStamped, pose_cb)
    rospy.Subscriber('/carla/guidance_bridge_node/active_status', String, guidance_bridge_node_status_callback)
    while rospy.is_shutdown() != True:
        if received_pose:
            if available_route_ids == None:
                rospy.logerr("No routes available, make sure the route folder at /opt/carma/routes has route file")
                break
            else:
                if check_selected_route(available_route_ids, selected_route_id) and is_guidance_bridge_node_active:
                    rospy.sleep(2)
                    set_route(selected_route_id)
                    break
        else:
            rospy.loginfo("Localization Incomplete")
        rospy.sleep(1)

if __name__ == '__main__':
    rospy.loginfo("carma_carla_route starting")
    initialize()
