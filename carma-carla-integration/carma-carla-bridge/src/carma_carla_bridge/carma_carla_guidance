#!/usr/bin/env python
# Copyright (C) 2021 LEIDOS.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.

"""
Subscribe from CARMA :cav_msgs::RouteEvent
    Topic: /guidance/route_event

Call Services from CARMA:
    Service: /guidance/set_guidance_active
             /guidance/plugins/get_active_plugins
"""
import rospy
import ast
from cav_msgs.msg import RouteEvent
from cav_msgs.msg import Plugin
from cav_srvs.srv import SetGuidanceActive, PluginList
from std_msgs.msg import String
route_selected = False

def route_event_callback(route_event_msg):
    """
    callback for route event subscribing from CARMA
    guidance_state_msg type:
        cav_msgs::GuidanceState
    """

    global route_selected
    if route_event_msg.event == RouteEvent.ROUTE_SELECTED or route_event_msg.event == RouteEvent.ROUTE_STARTED:
        rospy.loginfo("Route Selected")
        route_selected = True

def check_plugin_status(activate_plugins, plugin_list):
    """
    check active plugin with plugin list
    plugin_list: selected plugins + required plugins
    activate_plugins: the PluginList in /guidance/plugins/get_active_plugins ROS service
    """
    activate_plugins_name_list = []
    for activate_plugin in activate_plugins:
        if activate_plugin.available and activate_plugin.activated:
            activate_plugins_name_list.append(activate_plugin.name)
    if len(list( set(plugin_list) - set(activate_plugins_name_list) )) > 0:
        # still have some plugin not being activated yet
        rospy.logwarn("Some plugins are not activated...!")
        return False
    else:
        rospy.loginfo("All plugins activated...!")
        return True

def initialize():
    """
    main loop
    """
    rospy.init_node("carma_carla_guidance")

    # initialize ROS service
    set_guidance_active_serv = rospy.ServiceProxy('/guidance/set_guidance_active', SetGuidanceActive)
    active_plugins_serv = rospy.ServiceProxy('/guidance/plugins/get_active_plugins', PluginList)

    # initialize ROS topic
    rospy.Subscriber("/guidance/route_event",RouteEvent, route_event_callback)
    status_pub = rospy.Publisher('/carla/guidance_bridge_node/active_status', String, queue_size=10)
    # get selected plugins
    plugin_list_str = rospy.get_param("~selected_plugins")
    start_delay_in_seconds = rospy.get_param("~start_delay_in_seconds", 15.0)
    rospy.loginfo("Start delay in seconds: %f", start_delay_in_seconds)
    plugin_list = ast.literal_eval(plugin_list_str)
    if len(plugin_list) == 0:
        rospy.logerr("No input plugin found, please check the config file at /opt/carma/simulation/vehicle_config.json")
        return

    # initialize ROS service
    set_guidance_active_serv = rospy.ServiceProxy('/guidance/set_guidance_active', SetGuidanceActive)
    active_plugins_serv = rospy.ServiceProxy('/guidance/plugins/get_active_plugins', PluginList)

    # initialize ROS topic
    rospy.loginfo('List of plugins from config: %s', plugin_list)

    while rospy.is_shutdown() != True:
        active_plugins = active_plugins_serv().plugins
        status_msg = "The node is active"
        rospy.loginfo(status_msg)
        status_pub.publish(status_msg)

        if route_selected and check_plugin_status(active_plugins, plugin_list):
            seconds_passed = 0.0
            while (seconds_passed < start_delay_in_seconds):
                rospy.loginfo("Engaging the guidance in: " + str(start_delay_in_seconds - seconds_passed))
                seconds_passed += 1.0
                rospy.sleep(1)
            rospy.loginfo("Attempting to engage guidance")
            resp = set_guidance_active_serv(True)
            if resp.guidance_status:
                rospy.loginfo("Guidance engaged!")
                break
            else:
                rospy.logerr("Failed to set guidance status")
        else:
            rospy.sleep(1)

if __name__ == '__main__':
    rospy.loginfo("carma_carla_guidance starting")
    initialize()